"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, Tuple, Union

TARGET = ...
HELP = ...
class Options:
    mode = ...
    address: Union[Tuple[str, int], None] = ...
    log_to = ...
    log_to_stderr = ...
    target: Union[str, None] = ...
    target_kind: Union[str, None] = ...
    wait_for_client = ...
    adapter_access_token = ...
    config: Dict[str, Any] = ...


options = ...
def in_range(parser, start, stop): # -> Callable[..., Any]:
    ...

pid = ...
def print_help_and_exit(switch, it):
    ...

def print_version_and_exit(switch, it):
    ...

def set_arg(varname, parser=...): # -> Callable[..., None]:
    ...

def set_const(varname, value): # -> Callable[..., None]:
    ...

def set_address(mode): # -> Callable[..., None]:
    ...

def set_config(arg, it): # -> None:
    ...

def set_target(kind: str, parser=..., positional=...): # -> Callable[..., None]:
    ...

switches = ...
def consume_argv(): # -> Generator[str, Any, None]:
    ...

def consume_args(args: list): # -> Generator[str | Any, Any, None]:
    ...

def parse_args(): # -> None:
    ...

def parse_args_from_command_line(seen: set): # -> None:
    ...

def parse_args_from_environment(seenFromCommandLine: set): # -> None:
    ...

def parse_args_helper(args: list, seenFromCommandLine: set, seenFromEnvironment: set = ..., isFromEnvironment=...): # -> None:
    ...

def start_debugging(argv_0): # -> None:
    ...

def run_file(): # -> None:
    ...

def run_module(): # -> None:
    ...

def run_code(): # -> None:
    ...

def attach_to_pid(): # -> None:
    ...

def main(): # -> None:
    ...

