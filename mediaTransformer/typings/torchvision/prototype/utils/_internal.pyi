"""
This type stub file was generated by pyright.
"""

import torch
from typing import BinaryIO, Callable, Collection, Sequence, TypeVar

__all__ = ["add_suggestion", "fromfile", "ReadOnlyTensorBuffer"]
def add_suggestion(msg: str, *, word: str, possibilities: Collection[str], close_match_hint: Callable[[str], str] = ..., alternative_hint: Callable[[Sequence[str]], str] = ...) -> str:
    ...

D = TypeVar("D")
def fromfile(file: BinaryIO, *, dtype: torch.dtype, byte_order: str, count: int = ...) -> torch.Tensor:
    """Construct a tensor from a binary file.
    .. note::
        This function is similar to :func:`numpy.fromfile` with two notable differences:
        1. This function only accepts an open binary file, but not a path to it.
        2. This function has an additional ``byte_order`` parameter, since PyTorch's ``dtype``'s do not support that
            concept.
    .. note::
        If the ``file`` was opened in update mode, i.e. "r+b" or "w+b", reading data is much faster. Be aware that as
        long as the file is still open, inplace operations on the returned tensor will reflect back to the file.
    Args:
        file (IO): Open binary file.
        dtype (torch.dtype): Data type of the underlying data as well as of the returned tensor.
        byte_order (str): Byte order of the data. Can be "little" or "big" endian.
        count (int): Number of values of the returned tensor. If ``-1`` (default), will read the complete file.
    """
    ...

class ReadOnlyTensorBuffer:
    def __init__(self, tensor: torch.Tensor) -> None:
        ...
    
    def tell(self) -> int:
        ...
    
    def seek(self, offset: int, whence: int = ...) -> int:
        ...
    
    def read(self, size: int = ...) -> bytes:
        ...
    


